// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pagination "go.anx.io/go-anxcloud/pkg/pagination"

	param "go.anx.io/go-anxcloud/pkg/utils/param"

	server "go.anx.io/go-anxcloud/pkg/lbaas/server"
)

// Server is an autogenerated mock type for the API type
type Server struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, definition
func (_m *Server) Create(ctx context.Context, definition server.Definition) (server.Server, error) {
	ret := _m.Called(ctx, definition)

	var r0 server.Server
	if rf, ok := ret.Get(0).(func(context.Context, server.Definition) server.Server); ok {
		r0 = rf(ctx, definition)
	} else {
		r0 = ret.Get(0).(server.Server)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, server.Definition) error); ok {
		r1 = rf(ctx, definition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, identifier
func (_m *Server) DeleteByID(ctx context.Context, identifier string) error {
	ret := _m.Called(ctx, identifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, page, limit
func (_m *Server) Get(ctx context.Context, page int, limit int) ([]server.ServerInfo, error) {
	ret := _m.Called(ctx, page, limit)

	var r0 []server.ServerInfo
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []server.ServerInfo); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.ServerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, identifier
func (_m *Server) GetByID(ctx context.Context, identifier string) (server.Server, error) {
	ret := _m.Called(ctx, identifier)

	var r0 server.Server
	if rf, ok := ret.Get(0).(func(context.Context, string) server.Server); ok {
		r0 = rf(ctx, identifier)
	} else {
		r0 = ret.Get(0).(server.Server)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPage provides a mock function with given fields: ctx, page, limit, opts
func (_m *Server) GetPage(ctx context.Context, page int, limit int, opts ...param.Parameter) (pagination.Page, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, page, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pagination.Page
	if rf, ok := ret.Get(0).(func(context.Context, int, int, ...param.Parameter) pagination.Page); ok {
		r0 = rf(ctx, page, limit, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pagination.Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, ...param.Parameter) error); ok {
		r1 = rf(ctx, page, limit, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextPage provides a mock function with given fields: ctx, page
func (_m *Server) NextPage(ctx context.Context, page pagination.Page) (pagination.Page, error) {
	ret := _m.Called(ctx, page)

	var r0 pagination.Page
	if rf, ok := ret.Get(0).(func(context.Context, pagination.Page) pagination.Page); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pagination.Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pagination.Page) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, identifier, definition
func (_m *Server) Update(ctx context.Context, identifier string, definition server.Definition) (server.Server, error) {
	ret := _m.Called(ctx, identifier, definition)

	var r0 server.Server
	if rf, ok := ret.Get(0).(func(context.Context, string, server.Definition) server.Server); ok {
		r0 = rf(ctx, identifier, definition)
	} else {
		r0 = ret.Get(0).(server.Server)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, server.Definition) error); ok {
		r1 = rf(ctx, identifier, definition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
