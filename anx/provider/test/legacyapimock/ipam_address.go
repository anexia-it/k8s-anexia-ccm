// Code generated by MockGen. DO NOT EDIT.
// Source: go.anx.io/go-anxcloud/pkg/ipam/address (interfaces: API)

// Package legacyapimock is a generated GoMock package.
package legacyapimock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	address "go.anx.io/go-anxcloud/pkg/ipam/address"
	param "go.anx.io/go-anxcloud/pkg/utils/param"
)

// MockIPAMAddressAPI is a mock of API interface.
type MockIPAMAddressAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIPAMAddressAPIMockRecorder
}

// MockIPAMAddressAPIMockRecorder is the mock recorder for MockIPAMAddressAPI.
type MockIPAMAddressAPIMockRecorder struct {
	mock *MockIPAMAddressAPI
}

// NewMockIPAMAddressAPI creates a new mock instance.
func NewMockIPAMAddressAPI(ctrl *gomock.Controller) *MockIPAMAddressAPI {
	mock := &MockIPAMAddressAPI{ctrl: ctrl}
	mock.recorder = &MockIPAMAddressAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAMAddressAPI) EXPECT() *MockIPAMAddressAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPAMAddressAPI) Create(arg0 context.Context, arg1 address.Create) (address.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(address.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPAMAddressAPIMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPAMAddressAPI)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIPAMAddressAPI) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPAMAddressAPIMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPAMAddressAPI)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIPAMAddressAPI) Get(arg0 context.Context, arg1 string) (address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPAMAddressAPIMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPAMAddressAPI)(nil).Get), arg0, arg1)
}

// GetFiltered mocks base method.
func (m *MockIPAMAddressAPI) GetFiltered(arg0 context.Context, arg1, arg2 int, arg3 ...param.Parameter) ([]address.Summary, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFiltered", varargs...)
	ret0, _ := ret[0].([]address.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiltered indicates an expected call of GetFiltered.
func (mr *MockIPAMAddressAPIMockRecorder) GetFiltered(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiltered", reflect.TypeOf((*MockIPAMAddressAPI)(nil).GetFiltered), varargs...)
}

// List mocks base method.
func (m *MockIPAMAddressAPI) List(arg0 context.Context, arg1, arg2 int, arg3 string) ([]address.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]address.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPAMAddressAPIMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPAMAddressAPI)(nil).List), arg0, arg1, arg2, arg3)
}

// ReserveRandom mocks base method.
func (m *MockIPAMAddressAPI) ReserveRandom(arg0 context.Context, arg1 address.ReserveRandom) (address.ReserveRandomSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveRandom", arg0, arg1)
	ret0, _ := ret[0].(address.ReserveRandomSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveRandom indicates an expected call of ReserveRandom.
func (mr *MockIPAMAddressAPIMockRecorder) ReserveRandom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveRandom", reflect.TypeOf((*MockIPAMAddressAPI)(nil).ReserveRandom), arg0, arg1)
}

// Update mocks base method.
func (m *MockIPAMAddressAPI) Update(arg0 context.Context, arg1 string, arg2 address.Update) (address.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(address.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIPAMAddressAPIMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPAMAddressAPI)(nil).Update), arg0, arg1, arg2)
}
